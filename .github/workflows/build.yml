# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - validate Gradle Wrapper,
# - run 'test' and 'verifyPlugin' tasks,
# - run Qodana inspections,
# - run 'buildPlugin' task and prepare artifact for the further tests,
# - run 'runPluginVerifier' task,
# - create a draft release.
#
# Workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions

name: Build
on:
  # Trigger the workflow on pushes to only the 'master', 'support' and 'release' branches
  push:
    branches:
      - master
      - support/*
      - release/*
  # Trigger the workflow on any pull request
  pull_request:
    types: [ opened, reopened ]
  # Trigger the workflow on manual dispatch
  workflow_dispatch:

jobs:
  guard:
    name: Usage guard
    runs-on: ubuntu-latest
    steps:
      # Uses the action-usage-guard action
      - name: Run Action Usage Guard
        uses: nekofar/action-usage-guard@develop
        with:
          # GitHub access token for authentication.
          token: ${{ secrets.ACCESS_TOKEN }}
          # Defines the threshold for the usage guard.
          threshold: 70

  # Prepare environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [ guard ]
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.0.0

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      # Setup Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.8.0

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d ' ')"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "pluginVerifierHomeDir=~/.pluginVerifier" >> $GITHUB_OUTPUT
          
          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Extract changelog information
      - name: Prepare Changelog
        id: changelog
        shell: bash
        run: |
          GRADLE_PARAMS=(--no-header --console=plain --quiet)
          if [[ $GITHUB_REF == refs/heads/release/* || $GITHUB_REF == refs/pull/* ]]; then
            GRADLE_PARAMS+=(--unreleased)
          fi
          
          CHANGELOG="$(./gradlew getChangelog ${GRADLE_PARAMS[@]})"
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content

          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.0.0

      # Setup Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.8.0

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3.1.3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Upload Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v3.1.4
        with:
          files: ${{ github.workspace }}/build/reports/kover/xml/report.xml

  # Run Qodana inspections and provide report
  inspectCode:
    name: Inspect code
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.0.0

      # Setup Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: zulu
          java-version: 17

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2023.2.6
        with:
          cache-default-branch-only: true

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ build, test, inspectCode ]
    runs-on: ubuntu-latest
    steps:
      # Remove files to save space
      - name: Remove unnecessary files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.0.0

      # Setup Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.8.0

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3.3.2
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3.1.3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/support/')
    needs: [ build, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.0.0

      # Setup Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: zulu
          java-version: 17

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        uses: nekofar/create-github-release@v1.0.12
        with:
          tag: v${{ needs.build.outputs.version }} # The name of the tag to be released
          title: v${{ needs.build.outputs.version }} # The title for the release
          notes: ${{ needs.build.outputs.changelog }} # The release notes generated in the previous step
          draft: true # The release will be created as a draft
          prerelease: ${{ contains(needs.build.outputs.version, '-rc') || contains(needs.build.outputs.version, '-beta') || contains(needs.build.outputs.version, '-alpha') }} # Conditions to mark the release as a pre-release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
